<div class="title">
    <%= post.label :name, '銘柄' %>
    <%= post.text_postield :name %>
  </div>
  <div class="category">
    <%= post.label :kaori, '香り' %>
    <%= post.select :kaori, *[0..5] %>

    <%= post.label :karasa, '辛さ' %>
    <%= post.select :karasa, *[0..5] %>

    <%= post.label :nomigotae, 'のみごたえ' %>
    <%= post.select :nomigotae, *[0..5] %>

    <%= post.label :rarity, 'レア度' %>
    <%= post.select :rarity, *[0..5] %>

    <%= post.label :beginner, '初心者向け' %>
    <%= post.select :beginner, *[0..5] %>
  </div>

  <canvas id="myChart"></canvas>

  <!-- グラフ導入-->
  <script>
  sakegurahu();  <%# 下の行の定義してる  sakegurahu  を表示出させる指示  %>
  postunction sakegurahu() {  <%# rails で例えると＝controller内のdepostと同じ意味合い %>
    var ctx = document.getElementById("myChart");
     var kaori = document.getElementById("post_kaori").value;   <%# "post_kaori"の数字のデータを取得 %>
     var karasa = document.getElementById("post_karasa").value;    //.valueはid指定した中身のカラムだけ抜き取る
     var nomigotae = document.getElementById("post_nomigotae").value;
     var rarity = document.getElementById("post_rarity").value;
     var beginner = document.getElementById("post_beginner").value;
    //nar kaori <=  document.getElementById(idでデータを取得)   ("post_kaori").value
    var sake_data = [kaori, karasa, nomigotae, rarity, beginner];
    var myChart = new Chart(ctx, {
    type: 'radar',
    data: {
      labels: ["香り", "辛さ", "飲みごたえ", "レア度", "初心者向け"], <%#グラフの各データ名（評価基準名）%>
      datasets: [{
        label: '投稿者さんの評価グラフ',
        backgroundColor: "rgba(0,0,80,0.4)",
        borderColor: "rgba(0,0,80,1)",
        data: sake_data <%# グラフ内データ,  data: [1, 2, 3, 5] javascriptの書き方 %>
      }]
    },
    options: {
        scale: {
            ticks: {
                scaleBeginAtZero: true,
                min: 0,       <%# 最小値  %>
                max: 5,       <%# 最大値  %>
                stepSize: 1   <%# メモリのピッチ幅  %>
            }
        }
    }
  });
  };
  $('#post_kaori, #post_karasa, #post_nomigotae, #post_rarity, #post_beginner').change(postunction() {
    <%#  id取得('#post_kaori')したらデータを更新、変更change(postunction() { %>
  sakegurahu();
    <%#  定義されてるグラフを表示{(上の行の更新、変更後に表示させてグラフをupdateしてる)、(postunction sakegurahu() {   定義してるグラフを呼び出してる) %>
  });

  </script>
  <!--ここまでグラフのコード-->
</div>
<div class="col-lg-6">
  <div class="tag">
    <%= post.text_postield :tag_name, placeholder: "タグ付けをする場合は入力してください" %>
  </div>
  <div class="image_postield">
    <%= post.attachment_postield :post_images_images, multiple: true %>
    <%# 複数投稿  attachment_postieldを使う場合  %>
    <%# 例）今回の場合だと　　postモデルとアソシエーション関係の画像モデル_ カラム, multiple（多数）: true＜必須＞　%>
    <%#                                   post_image                      _  image,  multiple       :true　%>
  </div>
  <div class=thoughts_area>
    <%= post.text_area :thoughts, id: "post_text", placeholder: "投稿内容を入力", rows: 10%><%# placeholder ー 記述部分内に文字を反映させる、rows ー 記述部分の行数%>
  </div>
</div>
</div>
<div class="row">
<div class="postorm_area__action">